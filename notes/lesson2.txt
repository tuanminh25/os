## Milestone 2: Bare Minimum Kernel - Overview
# Flow for the Kernel

1. Bootloader loads kernel into memory

2. Bootloader transfers control to kernel entry point

3. Kernel initializes:
    + CPU state
    + Video output
    + Interrupt handlers
    + Basic keyboard input


Question:
1. What is CLI?
cli = "Clear Interrupt Flag." - Disable hardware interrupts by clearing interrupt flag in CPU flag register
- When disabled, cpu wont respond to external interrupt request from hardware device (why?)

2. Flow of program kernel_entry.asm 
    - The program begins at _start
    - Sets up the stack pointer (esp) to point to the top of the kernel stack
    - Calls the C++ function kernel_main (defined elsewhere)
    - If kernel_main ever returns (which it typically shouldn't in an OS kernel):
        + Disables interrupts with cli
        + Halts the CPU with hlt
        + If execution somehow continues, the jmp $ creates an infinite loop

3. What is _start and when is it triggered
_start is the entry point of the kernel. It's the first code executed when control is transferred to the kernel from the bootloader

The bootloader loads the kernel into memory and jumps to this entry point

The global _start directive makes this symbol visible to the linker so it can be referenced from outside this file.

4. [bits 32] vs [bits 16] for bootloader
[bits 16] is used for the bootloader because the CPU starts in 16-bit real mode when a computer boots up.

[bits 32] is used here because this code is for the kernel which runs after the bootloader has switched the CPU to 32-bit protected mode.

The change is necessary because 32-bit protected mode offers memory protection, larger address space, and other features needed for a modern OS.

5. What is section .bss?
The .bss section is used for uninitialized data in assembly and C programs. 
Variables in this section are allocated space in memory but aren't given initial values (they're zero-initialized by default)

In this code, it's used to reserve space for the kernel stack.

6. Kernel and kernel stack:
Kernel: The kernel is the core component of an operating system 
    + that manages system resources
    +  provides hardware abstraction
    +  offers services to applications.
    + It's the first program loaded after the bootloader
    + direct control over hardware.

Kernel stack: dedicated area of memory used for 
    + function calls, 
    + local variables
    +  procedure returns within the kernel code

kernel_stack_bottom marks the beginning of this space
kernel_stack_top marks the end
stacks typically grow downward in x86 
-> also why stack pointer is set at the top


in kernel.h

The most basic thing we have to write for our libs:
1. Char def
2. Video output
3. Screen i/o
4. hardware driver
    - init_idt() - Sets up the Interrupt Descriptor Table,
    which is necessary for handling interrupts from hardware and software

    - init_keyboard() - Initializes keyboard input, 
    one of the most basic input devices

in screen.cpp
1. is it designed in each cpu that a certain mem address is for video memory? 
ie here is at 0xB8000

- The memory address 0xB8000 is not designed into the CPU itself
- it's a specific hardware convention in the IBM PC architecture
- its descendants (including modern x86 systems)
- This address is part of the memory-mapped I/O system where
    + The video memory at 0xB8000 is actually part of the VGA (Video Graphics Array) hardware, not the CPU
    + When the system boots in text mode, the BIOS/firmware configures the hardware 
    + so that writes to this specific memory address range get redirected to the video display hardware


2. is screen i o is actually like 2d array kind of thing? where each pixel representing 1 bit
The screen I/O in this code is indeed organized like a 2D array, but it's not working with pixels
It's working with text characters in VGA text mode
Each position in this array holds a 16-bit value (uint16_t) that contains
    - 8 bits for the ASCII character code
    - 4 bits for background color
    - 4 bits for foreground color

3. why we have to use unsigned int here?
    - Memory addresses are always positive values
    - The bit manipulation being done combines character data with color attributes
    - using unsigned integers prevents potential issues with sign extension
    - Video memory access needs to be precise
    - unsigned values give a clear, predictable range (0 to 65535 for uint16_t)


in idt.cpp and idt_load.asm

1. What is an Interrupt Descriptor Table and what is it used for?
The Interrupt Descriptor Table (IDT) is a data structure used in x86 architecture to handle interrupts
a lookup table that tells the CPU what to do when an interrupt occurs.

When an interrupt happens, the processor uses the interrupt number to index into this table to find the appropriate handler function.

Interrupts can be:
    - Hardware interrupts (keyboard presses, timer ticks)
    - Software interrupts (programmed exceptions)
    - CPU exceptions (divide by zero, page faults)

2. What is __attribute__((packed))
This is a GCC compiler directive that tells the compiler not to add any padding between structure members for memory alignment
Normally, the compiler might add padding bytes between structure members to optimize memory access

With packed, the structure will use exactly the minimum amount of memory needed
important for hardware-defined structures like the IDT where the memory layout must match exactly what the CPU expects

3. Why use different size integers (uint8_t, uint16_t, uint32_t)?
uint8_t: 8-bit/1-byte value
uint16_t: 16-bit/2-byte value
uint32_t: 32-bit/4-byte value

The IDT structure follows Intel's defined format where each field has a specific size. How about AMD? 
Using the exact size types ensures the structure layout matches what the CPU expects, with no wasted space or misalignments.

4. What is asm volatile("sti");?
This is inline assembly code that executes the x86 instruction sti (Set Interrupt Flag)
This instruction enables interrupts by setting the interrupt flag in the CPU's EFLAGS register

The volatile keyword tells the compiler not to optimize this instruction away
as it has important side effects (enabling interrupts) that must occur exactly where specified

5. What are eax, [esp + 4], and lidt [eax]?
eax: A 32-bit general-purpose register in x86 architecture

[esp + 4]: Accessing memory at address ESP+4
ESP is the stack pointer register, and this is accessing the first parameter passed to the function
(in x86 calling convention, parameters are pushed onto the stack)

lidt [eax]
The LIDT instruction loads the Interrupt Descriptor Table register 
with the address stored in the memory location pointed to by EAX

Together, this code takes the pointer to the IDT (passed as a parameter)
loads it into the CPU's IDT register, telling the CPU where to find the interrupt handlers

6. What is the global keyword in assembly?
The global keyword (or directive) in assembly makes a label (function name) visible to the linker.
This allows the function to be called from other object files during linking.

In this case, global load_idt makes the load_idt function callable from C/C++ code,
allowing the C++ code to call this assembly function to load the IDT.

7. what happen if we dont declare the interuption descriptor table ? 
ie what happens when we just divide a number by 0 without exception handler? 
will that freeze the cpu?


a. Without an IDT:
When the CPU starts, it looks for interrupt handlers at fixed memory locations 
(called the Real Mode Interrupt Vector Table, starting at address 0)

In protected mode, without a properly configured IDT, the CPU doesn't know where to find exception handlers.

b. Division by Zero Scenario
    + When a division by zero occurs, the CPU tries to trigger interrupt 0 (the divide error exception)
    + It looks for the handler address in the IDT
    + If no valid handler is found (or the IDT isn't properly set up),
    the CPU enters a state called "double fault" (trying to handle the error of not having a handler)
    + If there's no double fault handler either, it may lead to a "triple fault"

c. Triple Fault: 
A triple fault is the CPU's last resort when it can't handle an exception properly.
This typically causes a processor reset or system reboot on physical hardware

d. In QEMU:
When running in an emulator like QEMU
a triple fault will usually cause the virtual machine to reset or display an error message
depending on configuration.

-- System can still be booted without IDT



in keyboard.cpp
1. About inb and outb:
    - inb reads data from a specified I/O port.
    It's a wrapper around the x86 assembly instruction inb
    lets your CPU read from hardware ports 
    In this case, it's reading from the keyboard's data port (0x60) to get keyboard input (scancodes).

    - outb writes data to a specified I/O port
    It's not for screen output
    but for sending commands to hardware devices.

2. About outb(0x21, inb(0x21) & ~2)
    - This line enables the keyboard interrupt (IRQ1) by:
        + Reading the current value from port 0x21
        (Programmable Interrupt Controller mask register)
        + Performing a bitwise AND with ~2 (which clears the second bit)
        + Writing it back to port 0x21
This operation unmasks (enables) the keyboard interrupt so OS can receive keyboard events.

3. About keyboard port
The keyboard port (0x60) isn't the physical USB/PS2 connector.
It's a specific memory-mapped I/O address that the keyboard controller makes available to the CPU
It's a software interface to communicate with the keyboard controller chip
allowing code to read input from whatever keyboard is physically connected.


4. so "0x60" is an memory address for keyboard interface? like it is specified?
It's not a regular memory address, but an I/O port address
In x86 architecture, I/O ports are a separate address space from memory, specifically designed for hardware communication
Port 0x60 is standardized as the keyboard data port across x86 systems
when you read from it, you get the latest scancode from the keyboard controller

5. can inb be understood as translating the input keyboard (physical) to asm code to the os?
Yes, understanding is close.
When you press a key, the keyboard controller converts that physical keypress into a "scancode"
(a numeric value identifying which key was pressed)
The inb function reads this scancode from port 0x60
which your OS can then interpret

6. About outb: sends commands to hardware, ex:
// Turn on the PC speaker
outb(0x43, 0xB6);  // Tell the PIT (timer) to prepare for frequency data
outb(0x42, 0x1F);  // Low byte of frequency value
outb(0x42, 0x4F);  // High byte of frequency value
outb(0x61, inb(0x61) | 3);  // Turn on the speaker by setting bits in port 0x61

flow of this code:
physical keyboard → keyboard controller → I/O ports (0x60) → inb → operating system code

7. why in this map, there are alot of 0 in between keys?
The zeros in the keyboard map represent scancodes that don't correspond to printable ASCII characters. These include

- Special keys like Escape, Tab, Caps Lock, Shift, Ctrl, Alt, and function keys (F1-F12)
- Navigation keys like arrows, Home, End, Page Up, Page Down
- Control keys like Print Screen, Scroll Lock, Pause/Break
- Reserved or unused scancodes in the standard set